{% if flag?(:linux) %}
# Generated by crystal_lib
lib LibEpoll
  CTL_ADD = 1
  CTL_DEL = 2
  CTL_MOD = 3
  Cloexec = 524288_i64
  union Data
    ptr : Void*
    fd : LibC::Int
    u32 : Uint32T
    u64 : Uint64T
  end
  alias Uint32T = LibC::UInt
  alias Uint64T = LibC::ULong
  struct Event
    events : Events
    data : DataT
  end
  type DataT = Data
  enum Events : LibC::Int
    Epollin = 1
    Epollpri = 2
    Epollout = 4
    Epollrdnorm = 64
    Epollrdband = 128
    Epollwrnorm = 256
    Epollwrband = 512
    Epollmsg = 1024
    Epollerr = 8
    Epollhup = 16
    Epollrdhup = 8192
    Epollexclusive = 268435456
    Epollwakeup = 536870912
    Epolloneshot = 1073741824
    Epollet = -2147483648
  end
  fun create = epoll_create(__size : LibC::Int) : LibC::Int
  fun create1 = epoll_create1(__flags : LibC::Int) : LibC::Int
  fun ctl = epoll_ctl(__epfd : LibC::Int, __op : LibC::Int, __fd : LibC::Int, __event : Event*) : LibC::Int
  fun wait = epoll_wait(__epfd : LibC::Int, __events : Event*, __maxevents : LibC::Int, __timeout : LibC::Int) : LibC::Int
  fun pwait = epoll_pwait(__epfd : LibC::Int, __events : Event*, __maxevents : LibC::Int, __timeout : LibC::Int, __ss : X__SigsetT*) : LibC::Int
  struct X__SigsetT
    __val : LibC::ULong[16]
  end
end

class IO::FileDescriptor
  class Group
    alias Events = LibEpoll::Events
    alias FD = Int32
    @fd : LibC::Int
    @event_code : LibEpoll::Event
    BUF_SIZE = 4
    @buffer = Bytes.new BUF_SIZE * sizeof(LibEpoll::Event)

    def initialize(@event_code)
      @fd = LibEpoll.create1 0
    end

    def initialize(@fd, @event_code)
    end

    def add(fd : FD)
      event = LibEpoll::Event.new
      event.events = @event_code
      event.data.fd = fd
      LibEpoll.ctl @fd, LibEpoll::CTL_ADD, fd, pointerof(event)
    end

    def add(fd_owner)
      add fd_owner.fd
    end

    def remove(fd : FD)
      LibEpoll.ctl @fd, LibEpoll::CTL_DEL, fd, nil
    end

    def remove(fd_owner)
      add fd_owner.fd
    end

    WAIT_INFINITE = -1_i32
    WAIT_IMEDIATELY = 0_i32
    # timeout : in milliseconds
    def wait(timeout : Int) : Iterator({FD, Events})
      num = LibEpoll.wait @fd, @buffer, BUF_SIZE, timeout
      num.times.map{|i| {@buffer[i].data.fd, @buffer[i].events} }
    end
  end
end
{% end %}
